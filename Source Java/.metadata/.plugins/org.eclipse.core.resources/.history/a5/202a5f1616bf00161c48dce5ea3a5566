package com.hcmus.model.service;


import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.transaction.annotation.Transactional;


import com.hcmus.model.pojo.MerchantType;

@Transactional
public class MerchantTypeService {
	private SessionFactory sessionFactory;
	
	public void setSessionFactory(SessionFactory sessionFactory){
		this.sessionFactory = sessionFactory;
	}
	private Session getSession() {
		return sessionFactory.openSession();
	}
	
	public List<MerchantType> SelectAllMerchantType(){
		Session session = getSession();
		List<MerchantType> result = new ArrayList<MerchantType>();
		try{
			Query query = session.createSQLQuery("exec sp_SelectAllMerchantType").addEntity(MerchantType.class);
			result = (List<MerchantType>)query.list();
			
		} catch(HibernateException ex){
			System.out.println(ex.toString());
		} finally{
			session.close();
		}
		return result;
	}
	public MerchantType findMerchantType(String id){
		Session session = getSession(); 
		try{
			session.beginTransaction();
			return (MerchantType)session.get(MerchantType.class, id);
		}catch(HibernateException e){
			return null;
		}
	}
	public boolean DeleteMERCHANT_TYPE(String id){// delete, id la MerchantType
		Session session = getSession();
		
		try{
			session.beginTransaction();
			session.delete(this.findMerchantType(id));
			session.getTransaction().commit();
			return true;
		}catch(HibernateException e){
			session.beginTransaction().rollback();
			return false;
		}
	}
	public boolean PostMERCHANT_TYPE(MerchantType mERCHANT_TYPE){//insert
		Session session = getSession();
		try{
			session.beginTransaction();
			session.save(mERCHANT_TYPE);
			session.getTransaction().commit();
			return true;
		}catch(HibernateException e){
			session.beginTransaction().rollback();
			return false;
		}
	}
	public boolean PutMERCHANT_TYPE(String id, String Desc){//update
		Session session = getSession();
		try{
			session.beginTransaction();
			MerchantType type = this.findMerchantType(id);
			type.setDescription(Desc);
			session.update(type);
			session.getTransaction().commit();
			return true;
		}catch(HibernateException e){
			session.getTransaction().rollback();
			return false;
		}
	}
	
}

